import os
import json
from collections import defaultdict

phoneme_f_mapping = {
    "p\u02b0": "f71",
    "p\u02b2\u02b0": "f72",
    "t\u032a\u02b0": "f73",
    "d\u032a\u02b0": "f74",
    "t\u02b0": "f75",
    "t\u02b2\u02b0": "f76",
    "d\u02b0": "f77",
    "ts\u02b0": "f83",
    "ts\u02b2\u02b0": "f84",
    "t\u0283\u02b0": "f85",
    "\u0288\u02b0": "f78",
    "\u0288\u0282\u02b0": "f86",
    "c\u02b0": "f79",
    "k\u02b0": "f80",
    "k\u02b2\u02b0": "f81",
    "q\u02b0": "f82",
    "p\u02bc": "f87",
    "b\u0330": "f88",
    "\u0294b": "f89",
    "\u0253\u0325": "f65",
    "\u0253": "f66",
    "t\u032a\u02bc": "f90",
    "t\u02bc": "f91",
    "t\u02b2\u02bc": "f92",
    "t\u0330": "f93",
    "t\u25cc\u0330": "f94",
    "d\u0330": "f95",
    "\u0294d": "f96",
    "ts\u02bc": "f109",
    "\u0294d\u0292": "f110",
    "\u0257\u0325": "f67",
    "\u0257": "f68",
    "t\u0283\u02bc": "f111",
    "\u0288\u02bc": "f97",
    "\u0288\u0282\u02bc": "f112",
    "c\u02bc": "f98",
    "c\u0330": "f99",
    "\u025f\u0330": "f100",
    "\u0284": "f69",
    "k\u02bc": "f101",
    "k\u02b2\u02bc": "f102",
    "k\u02b7\u02bc": "f103",
    "k\u0330": "f104",
    "k\u02b7\u0330": "f105",
    "k\u02b7\u25cc\u0330": "f106",
    "\u0261\u0330": "f107",
    "\u0260": "f70",
    "q\u02bc": "f108",
    "p": "f0",
    "p\u02d0": "f1",
    "p\u02b2": "f2",
    "p\u02b7": "f3",
    "ps": "f4",
    "\u02b0b": "f5",
    "b": "f6",
    "b\u02d0": "f7",
    "b\u02b2": "f8",
    "b\u02b7": "f9",
    "bz": "f10",
    "b\u03b2": "f11",
    "b\u02b0": "f12",
    "t\u032a": "f13",
    "t\u032a\u0299": "f14",
    "d\u032a": "f15",
    "t": "f16",
    "t\u02e3": "f17",
    "\u02b0t": "f18",
    "t\u02d0": "f19",
    "t\u02b2": "f20",
    "t\u02b7": "f21",
    "t\u033a": "f22",
    "\u02b0d": "f23",
    "d": "f24",
    "d\u02d0": "f25",
    "d\u02b2": "f26",
    "ts": "f53",
    "ts\u02b2": "f54",
    "dz": "f55",
    "t\u0283": "f56",
    "t\u0283\u02b2": "f57",
    "d\u0292": "f58",
    "\u0288": "f27",
    "\u0256": "f28",
    "\u0288\u0282": "f59",
    "\u0256\u0290": "f60",
    "c": "f29",
    "\u02b0c": "f30",
    "\u02b0\u025f": "f31",
    "\u025f": "f32",
    "t\u0255": "f61",
    "cc\u0327": "f62",
    "cc\u0327\u02b0": "f63",
    "\u025f\u029d": "f64",
    "k": "f33",
    "k\u02b2": "f34",
    "k\u02e3": "f35",
    "\u02b0k": "f36",
    "k\u02d0": "f37",
    "\u02b0k\u02b7": "f38",
    "k\u02b7": "f39",
    "k\u02b7\u02d0": "f40",
    "k\u032a": "f41",
    "k\u02b7\u02b2": "f42",
    "\u0261": "f45",
    "\u0261\u02d0": "f46",
    "\u0261\u02b7": "f47",
    "kp": "f43",
    "q": "f48",
    "q\u02b7": "f49",
    "\u0262": "f50",
    "\u0294": "f51",
    "\u0294\u02b2": "f52",
    "mp": "f113",
    "mp\u02b2": "f114",
    "m\u0278\u02b2": "f115",
    "mb": "f116",
    "mb\u02b2": "f117",
    "nt": "f118",
    "nt\u02b2": "f119",
    "ns": "f120",
    "ns\u02b2": "f121",
    "nd": "f122",
    "nd\u02b2": "f123",
    "nts": "f131",
    "ndz": "f132",
    "ndz\u02b2": "f133",
    "nt\u0283": "f127",
    "nd\u0292": "f128",
    "\u0273\u0288\u0282": "f129",
    "\u0273\u0256\u0290": "f130",
    "\u014bk": "f124",
    "\u014b\u0261": "f125",
    "\u014b\u0261\u02b7": "f126",
    "\u0278": "f162",
    "\u0278\u02b2": "f163",
    "\u03b2": "f164",
    "\u03b2\u02b2": "f165",
    "f\u02b7": "f166",
    "f": "f167",
    "v": "f168",
    "\u03b8": "f169",
    "s\u032a": "f170",
    "\u03b8\u02b2": "f171",
    "\u00f0": "f172",
    "s": "f173",
    "s\u02b2": "f174",
    "s\u02bc": "f175",
    "s\u02b0": "f176",
    "s\u033a": "f177",
    "z": "f178",
    "\u027c": "f179",
    "\u0283": "f182",
    "\u0292": "f183",
    "\u0292\u033a": "f184",
    "\u0282": "f180",
    "\u0290": "f181",
    "\u0255": "f185",
    "c\u0327": "f186",
    "\u029d": "f187",
    "x": "f188",
    "x\u02b2": "f189",
    "xl": "f190",
    "x\u02b7": "f191",
    "\u0263": "f192",
    "\u0263\u02b7": "f193",
    "\u028d": "f202",
    "\u03c7": "f194",
    "\u03c7\u02b7": "f195",
    "\u0281": "f196",
    "h": "f197",
    "h\u0303": "f198",
    "h\u02b2": "f199",
    "h\u02b7": "f200",
    "\u0266": "f201",
    "\u02b0m": "f134",
    "m\u02b0": "f135",
    "m\u0325": "f136",
    "m": "f137",
    "m\u02bc": "f138",
    "m\u0330": "f139",
    "m\u02b2": "f140",
    "m\u02b7": "f141",
    "m\u02d0": "f142",
    "\u0271": "f143",
    "n\u032a": "f144",
    "\u02b0n": "f145",
    "n\u02b0": "f146",
    "n\u0325": "f147",
    "n": "f148",
    "n\u02b2": "f149",
    "n\u02d0": "f150",
    "n\u0330": "f151",
    "\u0272\u02b0": "f152",
    "\u02b0\u0272": "f153",
    "\u0272": "f154",
    "\u0272\u0330": "f155",
    "\u0272\u02d0": "f156",
    "\u0272\u0325": "f157",
    "\u014b": "f158",
    "\u014b\u02b7": "f159",
    "\u014b\u0325": "f160",
    "N": "f161",
    "\u03b2\u031e": "f203",
    "\u028b": "f204",
    "\u0299": "f252",
    "\u00f0\u031e": "f205",
    "\u0279": "f206",
    "r\u0325": "f249",
    "r": "f250",
    "\u02b0\u027e": "f242",
    "\u027e": "f243",
    "\u027e\u0303": "f244",
    "\u027e\u02b2": "f245",
    "\u0294\u027e": "f246",
    "\u027b": "f207",
    "\u027b\u0325": "f208",
    "\u027d\u02b0": "f247",
    "\u027d": "f248",
    "\u02b0j": "f209",
    "j": "f210",
    "j\u0303": "f211",
    "j\u0325": "f212",
    "j\u02bc": "f213",
    "j\u0330": "f214",
    "j\u02d0": "f215",
    "\u0270": "f216",
    "\u02b0w": "f217",
    "w\u02b0": "f218",
    "w\u0325": "f219",
    "w": "f220",
    "w\u0303": "f221",
    "w\u02bc": "f222",
    "w\u0330": "f223",
    "w\u02b2": "f224",
    "w\u02d0": "f225",
    "\u0294w": "f226",
    "\u0295": "f227",
    "\u0280": "f251",
    "l\u032a": "f228",
    "l\u0325": "f229",
    "\u026c": "f230",
    "\u027a\u0325": "f231",
    "l": "f232",
    "l\u02b2": "f233",
    "l\u02bc": "f234",
    "l\u02d0": "f235",
    "\u027a": "f236",
    "\u026e": "f237",
    "\u026d": "f238",
    "\u026d\u02b2": "f239",
    "\u028e": "f240",
    "kl": "f241",
    "i": "f253",
    "i\u0303": "f254",
    "i\u0330": "f255",
    "i\u0330\u0303": "f256",
    "i\u02d0": "f257",
    "i\u0303\u02d0": "f258",
    "i\u02b0": "f259",
    "i\u02c0": "f260",
    "y": "f261",
    "y\u0303": "f262",
    "\u026a": "f287",
    "\u026a\u0303": "f288",
    "\u026a\u02d0": "f289",
    "\u028f": "f290",
    "\u0268": "f263",
    "\u0268\u0303": "f264",
    "\u0268\u0330": "f265",
    "\u0268\u02d0": "f266",
    "\u0268\u0303\u02d0": "f267",
    "\u0268\u0318": "f268",
    "\u0268i": "f269",
    "\u0289": "f270",
    "\u0289\u0303": "f271",
    "\u0289\u02d0": "f272",
    "\u026f": "f273",
    "\u026f\u0303": "f274",
    "\u026f\u0330": "f275",
    "\u026f\u02d0": "f276",
    "\u026f\u0303\u02d0": "f277",
    "\u026fi": "f278",
    "u": "f279",
    "u\u0303": "f280",
    "u\u0330": "f281",
    "u\u0330\u0303": "f282",
    "u\u02d0": "f283",
    "u\u0303\u02d0": "f284",
    "u\u02b0": "f285",
    "u\u02c0": "f286",
    "\u028a": "f291",
    "\u028a\u0303": "f292",
    "\u028a\u02d0": "f293",
    "e": "f294",
    "e\u0303": "f295",
    "e\u0330": "f296",
    "e\u0330\u0303": "f297",
    "e\u02d0": "f298",
    "e\u0303\u02d0": "f299",
    "e\u02b0": "f300",
    "eu": "f301",
    "e\u02c0": "f302",
    "\u00f8": "f303",
    "\u00f8\u02d0": "f304",
    "\u00f8\u0303": "f305",
    "\u025b": "f329",
    "\u025b\u0303": "f330",
    "\u025b\u02d0": "f331",
    "\u025b\u0303\u02d0": "f332",
    "\u0153": "f333",
    "\u0153\u0303": "f334",
    "\u0259": "f323",
    "\u0259\u0303": "f324",
    "\u0259\u0330": "f325",
    "\u0259\u0330\u0303": "f326",
    "\u0259\u02d0": "f327",
    "\u0259\u0303\u02d0": "f328",
    "\u0258": "f306",
    "\u0275": "f307",
    "\u0275\u02d0": "f308",
    "\u025c": "f335",
    "\u0264": "f309",
    "\u0264\u0303": "f310",
    "\u0264\u02d0": "f311",
    "o": "f312",
    "o\u0330\u0303": "f313",
    "o\u0330": "f314",
    "o\u0303": "f315",
    "o\u02d0": "f316",
    "o\u0303\u02d0": "f317",
    "o\u02b0": "f318",
    "o\u02b2": "f319",
    "o\u0303\u02b2": "f320",
    "o\u031d": "f321",
    "o\u02c0": "f322",
    "\u028c": "f336",
    "\u028c\u0303": "f337",
    "\u028c\u02d0": "f338",
    "\u028c\u0303\u02d0": "f339",
    "\u0254": "f340",
    "\u0254\u0303": "f341",
    "\u0254\u02d0": "f342",
    "\u0254\u0303\u02d0": "f343",
    "\u00e6": "f344",
    "\u00e6\u0303": "f345",
    "\u00e6\u02d0": "f346",
    "\u00e6\u0303\u02d0": "f347",
    "a": "f349",
    "a\u0303": "f350",
    "a\u0330": "f351",
    "a\u0330\u0303": "f352",
    "a\u02d0": "f353",
    "a\u0303\u02d0": "f354",
    "a\u02b2": "f355",
    "a\u0303\u02b2": "f356",
    "a\u02b2\u02d0": "f357",
    "a\u02b0": "f358",
    "a\u02c0": "f359",
    "\u0250\u0303": "f348",
    "\u0251": "f360",
    "\u0251\u0303": "f361",
    "\u0251\u0330": "f362",
    "\u0251\u02d0": "f363",
    "\u0252": "f364",
    "\u0252\u0303": "f365",
    "\u0252\u02d0": "f366",
    "\u0252\u0303\u02d0": "f367"
}
divIdsToGetOptionsFor = defaultdict(list)


def processDetailsExtraction(file):
    mainString = 'processdetails'
    procDetails = file.get(mainString, 'Unknown')
    thisLanguageFeatures = dict()

    if procDetails != 'Unknown':
        for processDictionary in procDetails:
            divIdsToGetOptionsFor["processtype"].append(processDictionary["processtype"])
            thisLanguageFeatures["f" + "processtype-"+processDictionary["processtype"]] = 1
            for subsection in ["undergoers", "triggers"]:
                for subsubsection in ["segments", "morphemes"]:
                    firstDictValue = processDictionary[subsection][subsubsection]
                    if type(firstDictValue) is dict:
                        firstDictValue = [firstDictValue]
                    for dictionary in firstDictValue:
                        for subsubsubsection in ["units", "positional_restrictions"]:
                            formattedStr = f"{mainString}_{subsection}_{subsubsection}_{subsubsubsection}"
                            extractedValue = dictionary[subsubsubsection]

                            # -------------------------------
                            def helper(formattedStr, extractedValue):
                                # if value is not informative, don't add to list of language features
                                if extractedValue is None or extractedValue == '' or extractedValue == 'Unknown' \
                                        or extractedValue == "Uncertain" or extractedValue == "NA":
                                    return
                                if not (
                                        subsubsection == "segments" and subsubsubsection == "units"):  # we use IPA keyboard here
                                    divIdsToGetOptionsFor[formattedStr].append(f"{extractedValue}")
                                # language feature that HTML form searches on
                                thisLanguageFeatures["f" + formattedStr + f"-{extractedValue}"] = 1

                            # -------------------------------
                            if type(extractedValue) is list:
                                for elem in extractedValue:
                                    helper(formattedStr, elem)
                            else:
                                helper(formattedStr, extractedValue)
    return thisLanguageFeatures


def scan_folder(folder_path):
    json_array = []
    for file_name in os.listdir(folder_path):
        if file_name.endswith('.json'):
            file_path = os.path.join(folder_path, file_name)
            with open(file_path, encoding="utf8") as file:
                data = json.load(file)
                lang_link = "inv/" + file_name[: file_name.index(".")] + ".html"
                f_codes = codeExtraction(data)
                info = {"title": data.get('name', 'Unknown'),
                        "iso_code": data.get('iso_codes', 'Unknown'),
                        "language": data.get('name', 'Unknown'),
                        "family": data.get('family', 'Unknown'),
                        "link": lang_link,
                        "coordinates": data.get('coordinates', 'Unknown'),
                        "faults": 0,
                        "codes": f_codes,
                        "processdetails": processDetailsExtraction(data)
                        }
                json_array.append(info)
    return json_array


def codeExtraction(file):
    phonemes = file.get('phonemes', 'Unknown')
    f_list = {}
    if phonemes != 'Unknown':
        for phon in phonemes:
            f_code = phon['phoneme']
            if f_code in phoneme_f_mapping:
                f_list[phoneme_f_mapping[f_code]] = 1
            else:
                print(file.get('name', 'Unknown') + ": " + phon['phoneme'])
    return f_list

def getUniqueProcessFeatures(divIdsToGetOptionsFor):
    return {key:sorted(list(set(value))) for key, value in divIdsToGetOptionsFor.items()}

def main():
    folder_path = 'json'
    result = scan_folder(folder_path)
    with open('langs.json', 'w') as output_file:
        json.dump(result, output_file, indent=4)
    selectionOptions = getUniqueProcessFeatures(divIdsToGetOptionsFor)
    with open("selectionOptions.json", "w") as o_file:
        json.dump(selectionOptions, o_file, indent=4)


if __name__ == '__main__':
    main()
